/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addGame } from '../fn/game-controller/add-game';
import { AddGame$Params } from '../fn/game-controller/add-game';
import { findAllGames } from '../fn/game-controller/find-all-games';
import { FindAllGames$Params } from '../fn/game-controller/find-all-games';
import { GameResponse } from '../models/game-response';
import { getGameById } from '../fn/game-controller/get-game-by-id';
import { GetGameById$Params } from '../fn/game-controller/get-game-by-id';
import { PageResponseGameResponse } from '../models/page-response-game-response';

@Injectable({ providedIn: 'root' })
export class GameControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addGame()` */
  static readonly AddGamePath = '/store/add-game';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addGame()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addGame$Response(params: AddGame$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return addGame(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addGame$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addGame(params: AddGame$Params, context?: HttpContext): Observable<void> {
    return this.addGame$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getGameById()` */
  static readonly GetGameByIdPath = '/store/game/{gameId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getGameById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getGameById$Response(params: GetGameById$Params, context?: HttpContext): Observable<StrictHttpResponse<GameResponse>> {
    return getGameById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getGameById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getGameById(params: GetGameById$Params, context?: HttpContext): Observable<GameResponse> {
    return this.getGameById$Response(params, context).pipe(
      map((r: StrictHttpResponse<GameResponse>): GameResponse => r.body)
    );
  }

  /** Path part for operation `findAllGames()` */
  static readonly FindAllGamesPath = '/store/all-games';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllGames()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllGames$Response(params?: FindAllGames$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseGameResponse>> {
    return findAllGames(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllGames$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllGames(params?: FindAllGames$Params, context?: HttpContext): Observable<PageResponseGameResponse> {
    return this.findAllGames$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseGameResponse>): PageResponseGameResponse => r.body)
    );
  }

}
