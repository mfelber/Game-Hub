/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getUser } from '../fn/user-profile-controller/get-user';
import { GetUser$Params } from '../fn/user-profile-controller/get-user';
import { updateBio } from '../fn/user-profile-controller/update-bio';
import { UpdateBio$Params } from '../fn/user-profile-controller/update-bio';
import { updateFavoriteGenres } from '../fn/user-profile-controller/update-favorite-genres';
import { UpdateFavoriteGenres$Params } from '../fn/user-profile-controller/update-favorite-genres';
import { updateUserProfile } from '../fn/user-profile-controller/update-user-profile';
import { UpdateUserProfile$Params } from '../fn/user-profile-controller/update-user-profile';
import { UserPublicResponse } from '../models/user-public-response';

@Injectable({ providedIn: 'root' })
export class UserProfileControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateUserProfile()` */
  static readonly UpdateUserProfilePath = '/profile/update-profile';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateUserProfile()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateUserProfile$Response(params: UpdateUserProfile$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateUserProfile(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateUserProfile$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateUserProfile(params: UpdateUserProfile$Params, context?: HttpContext): Observable<number> {
    return this.updateUserProfile$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `updateBio()` */
  static readonly UpdateBioPath = '/profile/update-bio';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateBio()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateBio$Response(params: UpdateBio$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateBio(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateBio$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateBio(params: UpdateBio$Params, context?: HttpContext): Observable<number> {
    return this.updateBio$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `updateFavoriteGenres()` */
  static readonly UpdateFavoriteGenresPath = '/profile/add/genres';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateFavoriteGenres()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateFavoriteGenres$Response(params: UpdateFavoriteGenres$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateFavoriteGenres(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateFavoriteGenres$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateFavoriteGenres(params: UpdateFavoriteGenres$Params, context?: HttpContext): Observable<void> {
    return this.updateFavoriteGenres$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getUser()` */
  static readonly GetUserPath = '/profile/user/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUser$Response(params: GetUser$Params, context?: HttpContext): Observable<StrictHttpResponse<UserPublicResponse>> {
    return getUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUser(params: GetUser$Params, context?: HttpContext): Observable<UserPublicResponse> {
    return this.getUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserPublicResponse>): UserPublicResponse => r.body)
    );
  }

}
